<?php

namespace Tests\Feature\Events;

use App\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Tests\TestCase;

class CreateEventTest extends TestCase
{
    use DatabaseMigrations;

    private $user;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();

        Auth::login($this->user);
    }

    public function test_create_event() {

        $title = 'test event';
        $startAt = Carbon::now();
        $endAt = Carbon::now()->addDays(2);

        $response = $this->post(route("events.store"), [
            'title'    => $title,
            'start_at' => $startAt,
            'end_at'   => $endAt,
        ]);

        $response->assertRedirect(route('events.index'));

        $this->assertDatabaseHas('events', [
            'title'    => $title,
            'start_at' => $startAt,
            'end_at'   => $endAt,
        ]);
    }

    /*
     *
     */
    public function test_invalid_post_data() {

        $this->withoutExceptionHandling();

        $title = 'test event';
        $startAt = Carbon::now();
        $endAt = Carbon::now()->addDays(2);

        $this->expectException(ValidationException::class);

        $data = [
            'title'    => null,
            'start_at' => $startAt,
            'end_at'   => $endAt,
        ];

        $int = random_int(0, count($data) - 1);

        unset($data[array_keys($data)[$int]]);

        $response = $this->post(route("events.store"), [
            'title'    => null,
            'start_at' => $startAt,
            'end_at'   => $endAt,
        ]);

    }
}
