<?php

namespace Tests\Feature;

use App\Delegate;
use App\DelegateRole;
use App\Enums\CarbonCopyType;
use App\Enums\SystemEvents;
use App\Event;
use App\Events\SystemEvent;
use App\Notification;
use App\TransactionType;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\MailCatcherTestCase;

class PaidWillSendNotificationTest extends MailCatcherTestCase
{
    use RefreshDatabase;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        factory(DelegateRole::class)->create([
            'is_default' => true
        ]);

        factory(TransactionType::class)->create([
            'label' => "Credit Card"
        ]);

    }

    protected function tearDown() {
        $this->removeAllEmails();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function paid_with_send_notification() {

        $subject = "Notification";

        $event = factory(Event::class)->create();

        $data = [
            'template'           => 'test_transaction',
            'subject'            => $subject,
            'event'              => SystemEvents::CREATE_DELEGATE,
            'event_id'           => $event->id,
            'include_duplicated' => false,
            'include_ticket'     => false,
            'verified_only'      => false,
            'role_id'            => null,
        ];
        $cc = "xavier.au+cc@anacreation.com";
        $bcc = "xavier+bcc@anacreation.com";

        $notification = factory(Notification::class)->create($data);

        $notification->addCc($cc);
        $notification->addBcc($bcc);

        $newDelegate = factory(Delegate::class)->create([
            'event_id' => $event->id
        ]);

        $this->assertDatabaseHas('carbon_copies', [
            'notification_id' => $notification->id,
            'email'           => $cc,
            'type'            => CarbonCopyType::CC()->getValue()
        ]);

        $this->assertDatabaseHas('carbon_copies', [
            'notification_id' => $notification->id,
            'email'           => $bcc,
            'type'            => CarbonCopyType::BCC()->getValue()
        ]);

        $role = DelegateRole::whereIsDefault(true)->first();
        $newDelegate->roles()->save($role);

        event(new SystemEvent(SystemEvents::CREATE_DELEGATE,
            $newDelegate));

        $email = $this->getLastEmail();
        $this->assertEmailSubjectContains($subject, $email);
        $this->assertHasCc($cc);
        $this->assertHasBCc($bcc);
    }
}
