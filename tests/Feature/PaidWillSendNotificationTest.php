<?php

namespace Tests\Feature;

use App\Delegate;
use App\DelegateRole;
use App\Enums\SystemEvents;
use App\Event;
use App\Events\SystemEvent;
use App\Notification;
use App\TransactionType;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\MailCatcherTestCase;

class PaidWillSendNotificationTest extends MailCatcherTestCase
{
    use RefreshDatabase;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        factory(DelegateRole::class)->create([
            'is_default' => true
        ]);

        factory(TransactionType::class)->create([
            'label' => "Credit Card"
        ]);

    }

    /**
     * @test
     */
    public function paid_with_send_notification() {

        $subject = "Notification";

        $event = factory(Event::class)->create();

        factory(Notification::class)->create([
            'template'           => 'test_transaction',
            'subject'            => $subject,
            'cc'                 => "xavier.au@anacreation.com",
            'bcc'                => "xavier@anacreation.com",
            'event'              => SystemEvents::CREATE_DELEGATE,
            'event_id'           => $event->id,
            'include_duplicated' => false,
            'include_ticket'     => false,
            'verified_only'      => false,
            'role_id'            => null,
        ]);

        $newDelegate = factory(Delegate::class)->create([
            'event_id' => $event->id
        ]);
        $role = DelegateRole::whereIsDefault(true)->first();
        $newDelegate->roles()->save($role);
        event(new SystemEvent(SystemEvents::CREATE_DELEGATE,
            $newDelegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

        $this->assertHasCc($email, 'xavier.au@anacreation.com');
        $this->assertHasBCc($email, 'xavier@anacreation.com');
    }
}
