<?php

namespace Tests\Feature;

use App\Session;
use App\Talk;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class TalkHasExtraAttributeTest extends TestCase
{
    use RefreshDatabase;

    private $session;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->session = factory(Session::class)->create();

    }

    /**
     * @test
     */
    public function create_talk() {

        $this->withoutExceptionHandling();

        $user = factory(User::class)->create();

        $this->actingAs($user);

        list($data, $response) = $this->createTalk();

        $response->assertRedirect(route('events.sessions.talks.index',
            [$this->session->event->id, $this->session->id]));

        $description = $this->session->talks->first()->extra_attributes->description;

        $this->assertEquals($data['extra_attributes']['description'],
            $description);

    }

    /**
     * @test
     */
    public function update_session_with_extra_attributes() {

        $this->withoutExceptionHandling();

        $user = factory(User::class)->create();

        $this->actingAs($user);

        $talk = factory(Talk::class)->create([
            'session_id' => $this->session->id
        ]);

        $uri = route('events.sessions.talks.update',
            [$talk->session->event->id, $talk->session->id, $talk->id]);

        $data = [
            'title'            => 'Session testing title',
            'speakers'         => ['John Doe'],
            'extra_attributes' => [
                'description' => "this is the updated description",
                'summary'     => "this is the updated summary",
            ]
        ];

        $this->put($uri, $data);

        $talk->refresh();

        $this->assertEquals($data['extra_attributes']['description'],
            $talk->extra_attributes->description);

        $this->assertEquals($data['extra_attributes']['summary'],
            $talk->extra_attributes->summary);

    }

    /**
     * @test
     */
    public function search_sessions() {

        $this->withoutExceptionHandling();

        factory(Talk::class)->create([
            'title'      => 'first talk',
            'session_id' => $this->session->id
        ]);

        factory(Talk::class)->create([
            'title'            => 'second talk',
            'session_id'       => $this->session->id,
            'extra_attributes' => [
                'description' => "this is the first description"
            ]
        ]);
        factory(Talk::class)->create([
            'title'            => 'third talk',
            'session_id'       => $this->session->id,
            'extra_attributes' => [
                'description' => "this is the second description"
            ]
        ]);
        factory(Talk::class)->create([
            'title'            => 'fourth talk',
            'session_id'       => $this->session->id,
            'extra_attributes' => [
                'description' => "this is the third description"
            ]
        ]);

        $keyword = "third";

        $uri = url('api/events/' . $this->session->event->id . '/talks/search?keyword=' . $keyword);

        $response = $this->json('get', $uri);

        $response->assertJsonCount(2, 'data');

        $keyword = "this is";
        $uri = url('api/events/' . $this->session->event->id . '/talks/search?keyword=' . $keyword);

        $response = $this->json('get', $uri);

        $response->assertJsonCount(3, 'data');

        $keyword = "first talk";
        $uri = url('api/events/' . $this->session->event->id . '/talks/search?keyword=' . $keyword);

        $response = $this->json('get', $uri);

        $response->assertJsonCount(1, 'data');

    }

    /**
     * @return array
     */
    private function createTalk(): array {
        $data = [
            'title'            => 'Session testing title',
            'speakers'         => ['John Doe'],
            'extra_attributes' => [
                'description' => "this is the extra description",
                'summary'     => "this is the extra summary",
            ]
        ];

        $uri = route('events.sessions.talks.store',
            [$this->session->event->id, $this->session->id]);

        $response = $this->post($uri, $data);

        return array($data, $response);
    }
}
