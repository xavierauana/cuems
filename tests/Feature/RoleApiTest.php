<?php

namespace Tests\Feature;

use App\Delegate;
use App\DelegateRole;
use App\Event;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class RoleApiTest extends TestCase
{
    use DatabaseMigrations;

    private $event;
    private $role1;
    private $role2;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->event = factory(Event::class)->create();
        $this->role1 = factory(DelegateRole::class)->create();
        $this->role2 = factory(DelegateRole::class)->create();
    }

    /**
     * A basic test example.
     *
     * @test
     */
    public function test_empty() {

        $response = $this->json('GET',
            route('api.delegates', $this->event->id));

        $this->assertEquals("", $response->content());

    }

    /**
     * @test
     */
    public function get_default_with_empty_result() {
        $response = $this->json('GET',
            route('api.delegates', [$this->event->id, 'role' => 'default']));

        $this->assertEquals("", $response->content());

    }

    /**
     * @test
     */
    public function test_1_delegate() {
        $delegate = $this->createDelegateWithRole($this->role1);

        $response = $this->json('GET',
            route('api.delegates',
                [$this->event->id, 'role' => $this->role1->code]));

        $response->assertJson([
            'data' => [
                $this->getJsonData($delegate)
            ]
        ]);
    }

    /**
     * @test
     */
    public function test_2_delegates() {
        $delegate1 = $this->createDelegateWithRole($this->role1);
        $delegate2 = $this->createDelegateWithRole($this->role1);

        $response = $this->json('GET',
            route('api.delegates',
                [$this->event->id, 'role' => $this->role1->code]));

        $data = $this->sortBy([
            $this->getJsonData($delegate1),
            $this->getJsonData($delegate2)
        ], 'surname');

        $response->assertJson(compact('data'));
    }

    /**
     * @test
     */
    public function test_2_delegates_and_1_other_with_surname_ordering() {
        $delegate1 = $this->createDelegateWithRole($this->role1);
        $delegate2 = $this->createDelegateWithRole($this->role1);
        $this->createDelegateWithRole($this->role2);

        $response = $this->json('GET',
            route('api.delegates',
                [$this->event->id, 'role' => $this->role1->code]));

        $data = $this->sortBy([
            $this->getJsonData($delegate1),
            $this->getJsonData($delegate2)
        ], 'surname');

        $response->assertJson(compact('data'));
    }

    /**
     * @test
     */
    public function test_1_delegate_and_2_others() {
        $delegate1 = $this->createDelegateWithRole($this->role1);
        $delegate2 = $this->createDelegateWithRole($this->role1);
        $delegate3 = $this->createDelegateWithRole($this->role2);

        $response = $this->json('GET',
            route('api.delegates',
                [$this->event->id, 'role' => $this->role2->code]));

        $response->assertJson([
            'data' => [
                $this->getJsonData($delegate3)
            ]
        ]);
    }

    /**
     * @return mixed
     */
    private function createDelegateWithRole(DelegateRole $role) {
        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id
        ]);

        $delegate->roles()->save($role);

        return $delegate;
    }

    /**
     * @param $delegate
     * @return array
     */
    private function getJsonData($delegate): array {
        return [
            'title'      => $delegate->prefix,
            'surname'    => $delegate->last_name,
            'given_name' => $delegate->first_name,
            'country'    => $delegate->country
        ];
    }

    /**
     * @param $delegate1
     * @param $delegate2
     * @return mixed
     */
    private function sortBy(array $delegates, string $key): array {
        return collect($delegates)
            ->sortBy($key)
            ->values()
            ->toArray();
    }
}
