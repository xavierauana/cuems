<?php

namespace Tests\Feature;

use App\Advertisement;
use App\AdvertisementType;
use App\Event;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class AdvertisementTest extends TestCase
{
    use RefreshDatabase;

    private $event;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->event = factory(Event::class)->create();

    }

    /**
     * @test
     */
    public function create_advertisement() {

        $this->withoutExceptionHandling();

        $logoFile = UploadedFile::fake()->image('logo.jpg');
        $banner1 = UploadedFile::fake()->image('banner1.jpg');
        $banner2 = UploadedFile::fake()->image('banner2.jpg');


        $user = factory(User::class)->create();

        $this->actingAs($user);

        $uri = route('events.advertisements.store', $this->event);

        $data = [
            'type_id'     => factory(AdvertisementType::class)->create()->id,
            'buyer'       => 'abc company',
            'description' => 'simple description',
            'logo'        => $logoFile,
            'banners'     => [$banner1, $banner2],
        ];

        $response = $this->post($uri, $data);

        $response->assertRedirect(route('events.advertisements.index',
            $this->event));

        $this->assertDatabaseHas('advertisements', [
            'buyer'       => $data['buyer'],
            'description' => $data['description'],
            'type_id'     => $data['type_id'],
        ]);


        /** @var \App\Advertisement $ad */
        $ad = Advertisement::first();

        $this->assertEquals(url(sprintf('storage/%s/logo.jpg', 1)),
            url($ad->getFirstMediaUrl('logo')));
        $this->assertEquals(url(sprintf('storage/%s/banner1.jpg', 2)),
            $ad->getMedia('banners')[0]->getFullUrl());

    }

    /**
     * @test
     */
    public function update_advertisement() {

        $this->withoutExceptionHandling();

        $logoFile = UploadedFile::fake()->image('logo.jpg');
        $newLogoFile = UploadedFile::fake()->image('new_logo.jpg');
        $banner1 = UploadedFile::fake()->image('banner1.jpg');
        $newBanner = UploadedFile::fake()->image('banner2.jpg');


        $user = factory(User::class)->create();

        $this->actingAs($user);

        $uri = route('events.advertisements.store', $this->event);

        $data = [
            'type_id'     => factory(AdvertisementType::class)->create()->id,
            'buyer'       => 'abc company',
            'description' => 'simple description',
            'logo'        => $logoFile,
            'banners'     => [$banner1],
        ];

        $this->post($uri, $data);

        $ad = Advertisement::first();

        $uri = route('events.advertisements.update', [$this->event, $ad]);

        $newData = [
            'type_id'     => factory(AdvertisementType::class)->create()->id,
            'description' => 'simple description more',
            'buyer'       => 'abc company',
            'logo'        => $newLogoFile,
            'banners'     => [$newBanner],
        ];

        $response = $this->put($uri, $newData);

        $response->assertRedirect(route('events.advertisements.index',
            $this->event));

        $this->assertEquals(url(sprintf('storage/%s/new_logo.jpg', 3)),
            url($ad->getFirstMediaUrl('logo')));
        $this->assertEquals(url(sprintf('storage/%s/banner1.jpg', 2)),
            $ad->getMedia('banners')[0]->getFullUrl());
        $this->assertEquals(url(sprintf('storage/%s/banner2.jpg', 4)),
            $ad->getMedia('banners')[1]->getFullUrl());
    }


    /**
     * @test
     */
    public function delete_advertisement_image() {

        $this->withoutExceptionHandling();

        $logoFile = UploadedFile::fake()->image('logo.jpg');
        $banner1 = UploadedFile::fake()->image('banner1.jpg');
        $banner2 = UploadedFile::fake()->image('banner2.jpg');


        $user = factory(User::class)->create();

        $this->actingAs($user);

        $uri = route('events.advertisements.store', $this->event);

        $data = [
            'type_id'     => factory(AdvertisementType::class)->create()->id,
            'description' => 'simple description',
            'buyer'       => 'abc company',
            'logo'        => $logoFile,
            'banners'     => [$banner1, $banner2],
        ];

        $response = $this->post($uri, $data);

        $response->assertRedirect(route('events.advertisements.index',
            $this->event));

        $this->assertDatabaseHas('advertisements', [
            'description' => $data['description'],
            'type_id'     => $data['type_id'],
        ]);


        /** @var \App\Advertisement $ad */
        $ad = Advertisement::first();

        $this->assertEquals(2, $ad->getMedia('banners')->count());

        $uri = route('events.advertisement.delete.image', [$ad->event, $ad, 3]);
        $response = $this->delete($uri);

        $response->assertRedirect();

        $ad->refresh();

        $this->assertEquals(1, $ad->getMedia('banners')->count());
        $this->assertEquals(storage_path('app/public/2/banner1.jpg'),
            $ad->getFirstMediaPath('banners'));
    }

    /**
     * @test
     */
    public function api_get_advertisement() {

        $advertisements = factory(Advertisement::class, 3)->create([
            'event_id' => $this->event->id
        ]);

        $uri = route('api.advertisements', $this->event);

        $response = $this->json('get', $uri);

        $response->assertJsonCount(3, 'data');

    }

    /**
     * @test
     */
    public function get_views() {

        $this->withoutExceptionHandling();

        $user = factory(User::class)->create();

        $this->actingAs($user);

        $advertisement = factory(Advertisement::class)->create([
            'event_id' => $this->event->id
        ]);

        $endpoints = [
            [
                'uri'  => "events/%s/advertisements",
                'view' => 'admin.events.advertisements.index',
                'keys' => ['event']
            ],
            [
                'uri'  => "events/%s/advertisements/%s",
                'view' => 'admin.events.advertisements.show',
                'keys' => ['event', 'advertisement']
            ],
            [
                'uri'  => "events/%s/advertisements/%s/edit",
                'view' => 'admin.events.advertisements.edit',
                'keys' => ['event', 'advertisement']
            ],
        ];

        foreach ($endpoints as $set) {
            $uri = url(sprintf($set['uri'], $advertisement->event->id,
                $advertisement->id));

            dump($uri);

            $response = $this->get($uri);

            $response->assertOk()
                     ->assertViewIs($set['view'])
                     ->assertViewHasAll($set['keys']);
        }

    }
}
