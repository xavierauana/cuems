<?php

namespace Tests\Unit\Events;

use App\Event;
use Carbon\Carbon;
use Illuminate\Support\Facades\Validator;
use Tests\TestCase;

class EventValidationTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */

    private $data;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $title = 'test event';
        $startAt = Carbon::now();
        $endAt = Carbon::now()->addDays(2);

        $this->data = [
            'title'    => $title,
            'start_at' => $startAt,
            'end_at'   => $endAt,
        ];
    }

    public function test_event_validation_success() {

        $validator = Validator::make($this->data, Event::StoreRules);

        $this->assertFalse($validator->fails());
    }

    public function test_event_validation_required_failed() {

        $keys = array_keys($this->data);

        foreach ($keys as $key) {
            $data = $this->data;

            unset($data[$key]);

            $validator = Validator::make($data, Event::StoreRules);

            $this->assertTrue($validator->fails());
            $this->assertTrue($validator->errors()->has($key));

        }
    }

    public function test_event_validation_date_failed() {

        $keys = ['start_at', 'end_at'];

        foreach ($keys as $key) {
            $data = $this->data;

            $data[$key] = "seomthingelse";

            $validator = Validator::make($data, Event::StoreRules);

            $this->assertTrue($validator->fails());
            $this->assertTrue($validator->errors()->has($key));

        }
    }

    public function test_event_validation_end_at_date_failed() {

        $this->data['end_at'] = Carbon::now()->addDays(-1);

        $validator = Validator::make($this->data, Event::StoreRules);

        $this->assertTrue($validator->fails(),"Validation should failed");

        $this->assertTrue($validator->errors()->has("end_at"));

    }
}
