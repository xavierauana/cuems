<?php

namespace Tests\Unit;

use App\Delegate;
use App\DelegateRole;
use App\Entities\ChargeResponse;
use App\Enums\DelegateDuplicationStatus;
use App\Enums\SystemEvents;
use App\Enums\TransactionStatus;
use App\Event;
use App\Events\SystemEvent;
use App\Jobs\SendNotification;
use App\Notification;
use App\PaymentRecord;
use App\Services\DelegateCreationService;
use App\Sponsor;
use App\Ticket;
use App\Transaction;
use App\TransactionType;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\MailCatcherTestCase;

class SystemNotificationsTest extends MailCatcherTestCase
{
    use RefreshDatabase, WithFaker;

    private $event;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->event = factory(Event::class)->create();
    }

    protected function tearDown() {

        $this->removeAllEmails();

        parent::tearDown();
    }

    public function test_notification_trigger() {

        factory(Notification::class)->create([
            'template' => 'test',
            'event'    => SystemEvents::TRANSACTION_COMPLETED,
            'event_id' => $this->event->id,
            'role_id'  => null
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id
        ]);
        $this->expectsJobs([SendNotification::class]);

        $ticket = factory(Ticket::class)->create(['event_id' => $this->event->id]);
        factory(Transaction::class)->create([
            "status"     => TransactionStatus::COMPLETED,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            "ticket_id"  => $ticket->id
        ]);

    }

    public function test_notification_not_trigger() {
        factory(Notification::class)->create([
            'event'    => SystemEvents::TRANSACTION_COMPLETED,
            'event_id' => $this->event->id
        ]);

        $this->doesntExpectJobs(SendNotification::class);

        $delegate = factory(Delegate::class)->create([
            'event_id' => factory(Event::class)->create()->id
        ]);
        $ticket = factory(Ticket::class)->create(['event_id' => $this->event->id]);
        factory(Transaction::class)->create([
            "status"     => TransactionStatus::PROCESSING,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            "ticket_id"  => $ticket->id
        ]);
    }

    public function test_transaction_notification_with_role_trigger() {
        $subject = "AOnbther subject";
        $role = factory(DelegateRole::class)->create();

        factory(Notification::class)->create([
            'event'    => SystemEvents::TRANSACTION_COMPLETED,
            'template' => 'test_transaction',
            'event_id' => $this->event->id,
            'role_id'  => $role->id,
            'subject'  => $subject,
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id
        ]);

        $delegate->roles()->save($role);

        //        $this->expectsJobs([SendNotification::class]);

        $ticket = factory(Ticket::class)->create(['event_id' => $this->event->id]);

        factory(Transaction::class)->create([
            "status"     => TransactionStatus::COMPLETED,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            "ticket_id"  => $ticket->id
        ]);

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);
    }

    /**
     * @test
     */
    public function test_delegate_notification_with_role_trigger() {
        $subject = "Subject 1";
        $role = factory(DelegateRole::class)->create();

        factory(Notification::class)->create([
            'template' => 'test_transaction',
            'event'    => SystemEvents::CREATE_DELEGATE,
            'event_id' => $this->event->id,
            'subject'  => $subject,
            'role_id'  => $role->id
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id
        ]);

        $delegate->roles()->save($role);

        //        $this->expectsJobs(SendNotification::class);

        $ticket = factory(Ticket::class)->create(['event_id' => $this->event->id]);

        factory(Transaction::class)->create([
            "status"     => TransactionStatus::COMPLETED,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            "ticket_id"  => $ticket->id
        ]);

        event(new SystemEvent(SystemEvents::CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

    }

    public function test_notification_with_role_not_trigger() {

        $role1 = factory(DelegateRole::class)->create();
        $role2 = factory(DelegateRole::class)->create();

        factory(Notification::class)->create([
            'event'    => SystemEvents::TRANSACTION_COMPLETED,
            'event_id' => $this->event->id,
            'role_id'  => $role1->id,
        ]);

        $this->doesntExpectJobs(SendNotification::class);

        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id,
        ]);

        $delegate->roles()->save($role2);

        $ticket = factory(Ticket::class)->create(['event_id' => $this->event->id]);

        factory(Transaction::class)->create([
            "status"     => TransactionStatus::COMPLETED,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            'ticket_id'  => $ticket->id,
        ]);
    }

    public function test_notification_email_sent() {

        $from = "xavier";
        $fromEmail = "xavier.au@anacreation.com";
        $subject = "Transaction Created";

        factory(Notification::class)->create([
            'template'   => 'test_transaction',
            'from_name'  => $from,
            'from_email' => $fromEmail,
            'subject'    => $subject,
            'event'      => SystemEvents::TRANSACTION_COMPLETED,
            'event_id'   => $this->event->id,
            'role_id'    => null
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id' => $this->event->id,
        ]);

        $ticket = factory(Ticket::class)->create([
            'event_id' => $this->event->id
        ]);

        factory(Transaction::class)->create([
            "status"     => TransactionStatus::COMPLETED,
            "payee_type" => get_class($delegate),
            "payee_id"   => $delegate->id,
            'ticket_id'  => $ticket->id
        ]);

        $email = $this->getLastEmail();
        $this->assertEmailBodyContains("testing transaction", $email);
        $this->assertEmailWasSentTo($delegate->email, $email);
        $this->assertEmailWasSentFrom($fromEmail, $email);
        $this->assertEmailSubjectContains($subject, $email);
    }

    /**
     * @test
     */
    public function admin_create_delegate_is_duplicated_with_not_duplicated_notification_sent_only(
    ) {
        $this->withoutExceptionHandling();

        $notificationData = [
            'template'           => 'test_transaction',
            'from_name'          => "Xavier",
            'from_email'         => "xavier.au@gmail.com",
            'subject'            => "Excluded",
            'event'              => SystemEvents::ADMIN_CREATE_DELEGATE,
            'event_id'           => $this->event->id,
            'role_id'            => null,
            "include_duplicated" => false
        ];

        $notification1 = factory(Notification::class)->create($notificationData);

        $this->assertDatabaseHas("notifications", $notificationData);

        $notification2 = factory(Notification::class)->create([
            'template'           => 'test_transaction',
            'from_name'          => "Xavier",
            'from_email'         => "xavier.au@gmail.com",
            'subject'            => "Included",
            'event'              => SystemEvents::ADMIN_CREATE_DELEGATE,
            'event_id'           => $this->event->id,
            'role_id'            => null,
            "include_duplicated" => true
        ]);

        $data = $this->createData($this->event,
            TransactionStatus::AUTHORIZED,
            DelegateDuplicationStatus::DUPLICATED);

        $uri = route('events.delegates.store', $this->event->id);

        $this->actingAs(factory(User::class)->create())->post($uri, $data);

        $this->assertDatabaseHas('delegates', [
            'first_name'    => $data['first_name'],
            'last_name'     => $data['last_name'],
            'is_duplicated' => DelegateDuplicationStatus::DUPLICATED,
        ]);

        $delegate = Delegate::whereFirstName($data["first_name"])
                            ->whereLastName($data["last_name"])
                            ->first();

        $this->assertEquals(1, collect($this->getAllEmail())->count());
        $email = $this->getLastEmail();
        $this->assertEmailWasSentTo($delegate->email, $email);
        $this->assertEmailSubjectContains($notification2->subject, $email);

    }

    /**
     * @test
     */
    public function notification_with_ticket_with_transaction_completed_event(
    ) {

        $this->withoutExceptionHandling();
        $subject = "Notification with ticket";

        $delegate = factory(Delegate::class)->create();

        factory(Notification::class)->create([
            'template'       => 'test_transaction',
            'from_name'      => "Xavier",
            'from_email'     => "xaive.au@anacreation.com",
            'subject'        => $subject,
            'event'          => SystemEvents::TRANSACTION_COMPLETED,
            'event_id'       => $delegate->event->id,
            'include_ticket' => true,
            'role_id'        => null
        ]);

        factory(Transaction::class)->create([
            'payee_id'   => $delegate->id,
            'payee_type' => Delegate::class,
            'status'     => TransactionStatus::COMPLETED
        ]);

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

        $this->assertEmailHasAttachment($delegate->getRegistrationId() . ".pdf",
            $email);

    }

    /**
     * @test
     */
    public function notification_with_ticket_with_delegate_completed_event() {

        $subject = "Notification with ticket delegate created";

        factory(Notification::class)->create([
            'template'       => 'test_transaction',
            'from_name'      => "Xavier",
            'from_email'     => "xaive.au@anacreation.com",
            'subject'        => $subject,
            'event'          => SystemEvents::ADMIN_CREATE_DELEGATE,
            'event_id'       => $this->event->id,
            'role_id'        => null,
            'include_ticket' => true
        ]);

        $data = $this->createData($this->event, TransactionStatus::COMPLETED);

        app(DelegateCreationService::class)->adminCreate($this->event,
            $data);

        $delegate = Delegate::where([
            'first_name' => $data['first_name'],
            'last_name'  => $data['last_name'],
        ])->first();

        event(new SystemEvent(SystemEvents::ADMIN_CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

        $this->assertEmailHasAttachment($delegate->getRegistrationId() . ".pdf",
            $email);

    }

    /**
     * @test
     */
    public function notification_with_no_ticket_with_delegate_completed_event(
    ) {

        $subject = "Notification with ticket delegate created";

        factory(Notification::class)->create([
            'template'       => 'test_transaction',
            'from_name'      => "Xavier",
            'from_email'     => "xaive.au@anacreation.com",
            'subject'        => $subject,
            'event'          => SystemEvents::ADMIN_CREATE_DELEGATE,
            'event_id'       => $this->event->id,
            'role_id'        => null,
            'include_ticket' => true
        ]);

        $data = $this->createData($this->event, TransactionStatus::AUTHORIZED);

        app(DelegateCreationService::class)->adminCreate($this->event,
            $data);

        $delegate = Delegate::where([
            'first_name' => $data['first_name'],
            'last_name'  => $data['last_name'],
        ])->first();

        event(new SystemEvent(SystemEvents::ADMIN_CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

        $this->assertNoAttachment($email);

    }

    /**
     * @test
     */
    public function self_registration_trigger_notification() {

        $subject = "Notification self created";

        $data = $this->createData($this->event, TransactionStatus::AUTHORIZED);

        $role = factory(DelegateRole::class)->create([
            'is_default' => true
        ]);

        $data['role_id'] = $role->id;
        factory(Notification::class)->create([
            'template'           => 'test_transaction',
            'from_name'          => "Xavier",
            'from_email'         => "xaive.au@anacreation.com",
            'subject'            => $subject,
            'event'              => SystemEvents::CREATE_DELEGATE,
            'event_id'           => $this->event->id,
            'include_ticket'     => true,
            'include_duplicated' => false,
            'verified_only'      => false,
            'role_id'            => $role->id
        ]);

        factory(TransactionType::class)->create([
            'label' => 'Credit Card'
        ]);


        $chargeId = 'invoice_123';
        $chargeResponse = new ChargeResponse($chargeId, "brand", "1111");

        $paymentRecord = PaymentRecord::create([
            'invoice_id' => $chargeId,
            'form_data'  => $data,
            'event_id'   => $this->event->id,
            'status'     => "created"
        ]);

        app(DelegateCreationService::class)->selfCreate($this->event, $data,
            $chargeResponse, $paymentRecord);

        $delegate = Delegate::where([
            'first_name' => $data['first_name'],
            'last_name'  => $data['last_name'],
        ])->first();

        event(new SystemEvent(SystemEvents::CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

    }


    /**
     * @test
     */
    public function verified_delegates_only() {

        $subject = "Verified Delegates only";

        factory(Notification::class)->create([
            'template'       => 'test_transaction',
            'from_name'      => "Xavier",
            'from_email'     => "xaive.au@anacreation.com",
            'subject'        => $subject,
            'event'          => SystemEvents::ADMIN_CREATE_DELEGATE,
            'event_id'       => $this->event->id,
            'role_id'        => null,
            'include_ticket' => false,
            'verified_only'  => true
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id'    => $this->event->id,
            'is_verified' => false
        ]);

        event(new SystemEvent(SystemEvents::ADMIN_CREATE_DELEGATE, $delegate));

        $this->assertEquals(0, count($this->getAllEmail()));

        $delegate = factory(Delegate::class)->create([
            'event_id'    => $this->event->id,
            'is_verified' => true
        ]);

        event(new SystemEvent(SystemEvents::ADMIN_CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

    }

    /**
     * @test
     */
    public function verified_transaction_delegates_only() {

        $this->withoutExceptionHandling();

        $subject = "Verified Delegates only";

        factory(Notification::class)->create([
            'template'       => 'test_transaction',
            'from_name'      => "Xavier",
            'from_email'     => "xaive.au@anacreation.com",
            'subject'        => $subject,
            'event'          => SystemEvents::TRANSACTION_COMPLETED,
            'event_id'       => $this->event->id,
            'role_id'        => null,
            'include_ticket' => false,
            'verified_only'  => true
        ]);

        $delegate = factory(Delegate::class)->create([
            'event_id'    => $this->event->id,
            'is_verified' => false
        ]);

        factory(Transaction::class)->create([
            'payee_id'   => $delegate->id,
            'payee_type' => Delegate::class,
            'status'     => TransactionStatus::COMPLETED
        ]);

        $this->assertEquals(0, count($this->getAllEmail()));

        $delegate = factory(Delegate::class)->create([
            'event_id'    => $this->event->id,
            'is_verified' => true
        ]);

        factory(Transaction::class)->create([
            'payee_id'   => $delegate->id,
            'payee_type' => Delegate::class,
            'status'     => TransactionStatus::COMPLETED
        ]);

        event(new SystemEvent(SystemEvents::ADMIN_CREATE_DELEGATE, $delegate));

        $email = $this->getLastEmail();

        $this->assertEmailSubjectContains($subject, $email);

    }



    private function createData(
        Event $event = null, int $status = TransactionStatus::AUTHORIZED,
        string $duplicateStatus = DelegateDuplicationStatus::NO
    ): array {

        $event = $event ?? factory(Event::class)->create();
        $ticket = factory(Ticket::class)->create([
            'event_id' => $event->id
        ]);
        $transactionType = factory(TransactionType::class)->create();

        factory(DelegateRole::class)->create([
            'is_default' => true
        ]);

        return [
            "prefix"                        => $this->faker->title,
            "first_name"                    => $this->faker->firstName,
            "last_name"                     => $this->faker->lastName,
            "is_male"                       => rand(0, 1),
            "position"                      => $this->faker->jobTitle,
            "department"                    => $this->faker->jobTitle,
            "institution"                   => $this->faker->company,
            "other_institution"             => $this->faker->company,
            "address_1"                     => $this->faker->address,
            "address_2"                     => $this->faker->address,
            "address_3"                     => $this->faker->address,
            "email"                         => $this->faker->email,
            "mobile"                        => $this->faker->phoneNumber,
            "fax"                           => $this->faker->phoneNumber,
            "country"                       => $this->faker->country,
            "training_organisation"         => $this->faker->company,
            "training_other_organisation"   => $this->faker->company,
            "training_organisation_address" => $this->faker->address,
            "supervisor"                    => $this->faker->name,
            "training_position"             => $this->faker->jobTitle,
            "is_duplicated"                 => $duplicateStatus,
            "is_verified"                   => rand(0, 1),
            "roles_id"                      => null,
            "duplicated_with"               => null,
            "sponsor"                       => [
                "email"      => $this->faker->email,
                "name"       => $this->faker->name,
                "address"    => $this->faker->address,
                "sponsor_id" => factory(Sponsor::class)->create([
                    'event_id' => $event->id
                ])->id,
            ],
            "status"                        => $status,
            "ticket_id"                     => $ticket->id,
            "note"                          => $this->faker->paragraph,
            "transaction_type_id"           => $transactionType->id,
        ];
    }

}


